openapi: 3.0.1
info:
  title: Buying tickets
  contact:
    email: deinMutter@gmail.com
  version: 1.0.0

servers:
- url: https://buyticket.swagger.io/v2
- url: http://buyticket.swagger.io/v2

paths:
  /User:
    post:
      tags:
      - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /User/{username}:
    get:
      tags:
      - User
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /Event:
    post:
      tags:
        - Event
      summary: Create event
      operationId: createEvent
      requestBody:
        description: Created event object
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true

      responses:
        default:
          description: successful operation
          content: { }
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: [ ]
      x-codegen-request-body-name: body
  /Event/{id}:
    get:
      tags:
      - Event
      summary: Get event by id
      operationId: getEventById
      parameters:
      - name: id
        in: path
        description: 'Use id to get event'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: Event not found
          content: {}
      security:
        - buyticket_auth:
            - write:ticket
            - read:ticket
    delete:
      tags:
      - Event
      summary: Delete event by id
      operationId: deleteEventById
      parameters:
      - name: id
        in: path
        description: 'The id that needs to be deleted'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: Event not found
          content: {}
      security:
        - api_key: [ ]
    put:
      tags:
        - Event
      summary: Update an existing Event
      operationId: updateEvent
      requestBody:
        description: Event object that needs to be updated
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      parameters:
      - name: id
        in: path
        description: 'Use id to update event'
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Event not found
          content: { }
        405:
          description: Validation exception
          content: { }
      security:
        - api_key: [ ]
      x-codegen-request-body-name: body
  /Ticket:
    post:
      tags:
        - Ticket
      summary: Reserve the ticket
      operationId: reserveTicket
      requestBody:
        description: Reserve a new ticket
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        default:
          description: successful operation
          content: { }
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: Reserving not found
          content: {}
      security:
        - buyticket_auth:
            - write:ticket
            - read:ticket
      x-codegen-request-body-name: body

  /Ticket/{id}:
    put:
      tags:
        - Ticket
      summary: Buy ticket
      operationId: updateTicket
      requestBody:
        description: Ticket object that needs to be bought
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      parameters:
      - name: id
        in: path
        description: 'The id of ticket, that needs to be bought'
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Ticket not found
          content: { }
        405:
          description: Validation exception
          content: { }
      security:
        - buyticket_auth:
            - write:ticket
            - read:ticket
      x-codegen-request-body-name: body
    delete:
      tags:
      - Ticket
      summary: Cancel the resevation
      description: You can cancel only if you reserve it previously
      operationId: Ticket
      parameters:
      - name: id
        in: path
        description: The id ticket that needs to be canceled
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: Reserving not found
          content: {}
      security:
        - buyticket_auth:
            - write:ticket
            - read:ticket
      x-codegen-request-body-name: body
components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        Title:
          type: string
      xml:
        name: Event
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        idTicket:
          $ref: '#/components/schemas/Ticket'
        username:
          type: string
        email:
          type: string
        password:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        idEvent:
          $ref: '#/components/schemas/Event'
        is_booked:
          type: boolean
        is_sold:
          type: boolean
      xml:
        name: Ticket
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    buyticket_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://buyticket.swagger.io/oauth/dialog
          scopes:
            write:ticket: modify tickets in your account
            read:ticket: read your tickets
    api_key:
      type: apiKey
      name: api_key
      in: header